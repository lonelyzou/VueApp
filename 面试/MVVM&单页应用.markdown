
##MVC
通过controller的控制去操作model层的数据，并且返回给view层展示
Model层用来存储业务的数据，一旦数据发生变化，模型将通知有关的视图。
View 很简单，就是用户看到的视图
当用户出发事件的时候，view层会发送指令到controller层，接着controller去通知model层更新数据，model层更新完数据以后直接显示在view层上，这就是MVC的工作原理。
MVC允许在不改变视图的情况下改变视图对用户输入的响应方式，用户对View的操作交给了Controller处理，在Controller中响应View的事件调用Model的接口对数据进行操作，一旦Model发生变化便通知相关视图进行更新。
Controller
控制器是模型和视图之间的纽带，MVC将响应机制封装在controller对象中，当用户和你的应用产生交互时，控制器中的事件触发器就开始工作了。



MVC模式的业务逻辑主要集中在Controller，而前端的View其实已经具备了独立处理用户事件的能力，当每个事件都流经Controller时，这层会变得十分臃肿。而且MVC中View和Controller一般是一一对应的，捆绑起来表示一个组件，视图与控制器间的过于紧密的连接让Controller的复用性成了问题，

##MVVM
MVVM是Model-View-ViewModel的缩写
Model
在MVVM中，我们可以把Model称为数据层，负责业务逻辑和数据封装，因为它仅仅关注数据本身，不关心任何行为（格式化数据由View的负责），这里可以把它理解为一个类似json的数据对象。

View
负责界面和显示,和MVC不同的是，MVVM中的View通过使用模板语法来声明式的将数据渲染进DOM，当ViewModel对Model进行更新的时候，会通过数据绑定更新到View。

ViewModel
监听模型数据的改变和控制视图行为，处理用户交互，简单来说就是通过双向数据绑定把View层和Model层连接起来。在MVVM架构下，View和Model没有直接联系，而是通过ViewModel进行交互，我们只关注业务逻辑，不需要手动操作DOM，不需要关注View和Model的同步工作。

除了以上三个部分，其实在 MVVM 中还引入了一个隐式的 Binder 层，实现了 View 和 ViewModel 的绑定。
以 Vue 框架来举例，这个隐式的 Binder 层就是 Vue 通过解析模板中的插值和指令从而实现 View 与 ViewModel 的绑定。

对于 MVVM 来说，其实最重要的并不是通过双向绑定或者其他的方式将 View 与 ViewModel 绑定起来，而是通过 ViewModel 将视图中的状态和用户的行为分离出一个抽象，这才是 MVVM 的精髓。

##单页应用程序
###定义
单页Web应用程序是一种只需要将单个页面加载到浏览器之中的Web应用程序。
单页Web应用程序是围绕着将单个页面内容进行动态重写的概念所构建。这与从服务器端加载过来的预渲染页面有着本质的不同。
通过采用这种方法，单页Web应用程序可以避免那些，在服务器上渲染各种页面时所产生的中断问题。这就消除了一直以来困惑在Web开发业界的一个最大问题：如何才能向用户提供无缝的访问体验。

###原理
在单页Web应用程序中，当浏览器向服务器发出第一个请求时，服务器会返回一个index.html文件。这是全程唯一提供HTML文件的一次。
该HTML文件为.js类型的文件准备了一个脚本标签，而该标签正好可以被用来控制index.html页面。由于所有后续的调用都只会返回JSON格式的数据，因此应用程序也就使用此类JSON数据，来动态地更新页面。
不过值得注意的是，该页面将不再也永远不会被重新加载。

一旦应用程序被启动，客户端(而不是服务器)就会通过处理，将数据转换为HTML。基本上，大多数现代单页应用框架都拥有一个，能够在浏览器中运行的模板引擎，从而生成HTML。
通过与传统的Web应用程序相比较，你不难发现：在传统应用程序中，在每次应用程序调用服务器时，服务器都需要渲染整个HTML页面。相应地，客户端会接收到被渲染的页面，并触发整个页面的刷新。因此在这种情况下，浏览器扮演的就是客户端的角色。

###SPA有何优势?
单页应用能够节省大量的时间和带宽，大幅提到应用程序的响应能力。
在一定程度上加快了数据的刷新，并减少了带宽的消耗，给用户也带来更好的体验。
虽然那些单页Web应用持否定态度的开发人员会争辩说：JavaScript包的大小有可能会因此变得臃肿。但是客观而言，如今大多数优秀的SPA框架都提供了很好的代码分割方法。因此，我们可以通过检查捆绑包的大小，只在适用的情况下再进行按需加载。
另一个关于SPA整体架构但不太明显的好处是：使用JSON发送应用数据的方式，会在HTML的视图层和应用程序层之间创建一种分离。这便使得表示层与应用层相分离，以方便不同的开发人员去独立地开发每一个层面。因此，您可以在不修改应用程序逻辑的情况下，去替换某些HTML标记。当然，客户端和服务器也是完全相互独立的。
同时，还有一个可能被忽略的优势是：单页应用程序在生产环境中的部署特性。由于SPA非常易于被部署，那么我们在生产环境中构建SPA时，会很容易地最终得到一个HTML文件、一个CSS包和一个JavaScript包。因此，任何静态内容服务器都可以被用来存放这些文件。此类服务器包括：Nginx、Amazon S3 Bucket、Apache和Firebase。



优缺点
1、优点：
1).良好的交互体验，用户不需要重新刷新页面，获取数据也是通过Ajax异步获取，页面显示流畅。
2).良好的前后端工作分离模式，
 页面切换快
3).减轻服务器压力，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；
4).共用一套后端程序代码，不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端；
2、缺点：

1).SEO难度较高
由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧。
2).前进、后退管理
由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现。
3).初次加载耗时多
为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理，如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的。

##对提高单页应用首屏响应
```
压缩代码
框架和插件按需加载
使用CDN资源,减小服务器带宽压力
若首屏为登录页，可以做成多入口，登录页单独分离为一个入口
路由懒加载也就是 把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件。 
结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。 
使用gzip减小网络传输的流量大小
图片懒加载
服务端渲染技术（SSR）
```

###单页应用与多页应用（MPA）区别

|  | 多页面应用模式MPA  | 单页面应用模式SPA |
| ------ | ------ | ------ |
| 应用构成 |  由多个完整页面构成 | 一个外壳页面和多个页面片段构成 |
| 跳转方式 |页面之间的跳转是从一个页面到另一个页面 | 个页面片段删除或隐藏，加载另一个页面片段并显示。片段间的模拟跳转，没有开壳页面 |
| 跳转后公共资源是否重新加载 |  是 | 否 |
| 用户体验 |  页面间切换加载慢，不流畅，用户体验差，尤其在移动端 |  页面片段间切换快，用户体验好，包括移动设备 |
| 能否实现转场动画 | 否   | 容易实现（手机APP动效） |
| 搜索引擎优化（SEO） |  可以直接做   | 需要单独方案（SSR） |
| 页面间传递数据 | 依赖URL、cookie或者localstorage，实现麻烦   | 页面传递数据容易（Vuex或Vue中的父子组件通讯props对象）） |
| 特别适用的范围 |  需要对搜索引擎友好的网站    | 对体验要求高，特别是移动应用 |




      

   

   
  

