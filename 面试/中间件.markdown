
##中间件：
    1. 是什么
      本质上是一个函数，这个函数有三个参数req，res, next
    2. 参数含义
      req 请求对象
      res 响应对象
      next 函数，调用下一个中间件
    3. 作用
      执行任何代码。
      更改请求和响应对象。
      接受请求、返回响应。（注意：中间件一般不直接返回响应，一般是由路由返回响应，中间件负责处理一下请求相关的信息）
      调用堆栈中的下一个中间件函数。
    4. 应用
      应用程序级中间件
        放在路由上面，更改请求和响应对象。   过滤非法请求（防盗链）
      路由器级中间件
        Router路由器 后面讲
      内置中间件
        express框架内置的中间件
          express.static(资源文件目录)   向外暴露静态资源
          express.urlencoded()  解析post请求的请求体参数，就能通过req.body获取
      第三方中间件
        社区开发的中间件 cookie-parser  解析cookie数据
      错误处理中间件
        (err, req, res, next) => {}  一旦中间件或者路由出问题，就触发错误中间件处理
        404页面


##中间件应用

* 内置中间件（一般放在所有中间件最上面）
 * app.use(express.static('public'));
     * 暴露public文件夹下的文件，然后可以通过url路由路径加文件名就可以请求到文件,所以当你设置了express.static()就可以不用自己去配文件请求地址
     * 如果你不想使用，可以通过res.sendFile(路径)来自己设置;
*     router.get('/login', (req,res) => {
          res.sendFile(__dirname + '/public/login.html');
        })
   
 * app.use(express.urlencoded({extended: true}));
    使用了express.urlencoded() 中间件后，就可以通过req.body获取到post请求的请求体参数
* 错误处理中间件，捕获到之前中间件产生的错误（一般放在所有中间件最下面）
  * app.use((err, req, res, next) => {
  console.log(err);
}) 
* 最基本的中间件 - 能够接受处理所有请求（）
 * 中间件在前面调用，路由在后面调用，只会调用中间件，不会触发路由，想要调用路由，中间件必须要执行 next();
*      app.use((req, res, next) => {
        // console.log(req.headers);
        // req.xxx = 123;
        // res.xxxx = 456;
        console.log(req.body); // { username: 'admin', password: 'admin' }
  
        console.log(aaa);
  
        if (/[Chrome]/.test(req.headers['user-agent'])) {
            console.log(11111);
            next();
        } else {
          res.end('error');
        }
        // res.send('这是中间件返回的响应');
        })
        app.get('/', (req, res) => {
         // console.log(req.xxx);
        // console.log(res.xxxx);
        res.send('这是路由返回的响应');
        })

